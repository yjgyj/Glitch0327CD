echo "Y29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoImV4cHJlc3MiKTsKY29uc3QgYXBwID0gZXhwcmVzcygpOwpjb25zdCBheGlvcyA9IHJlcXVpcmUoImF4aW9zIik7CmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTsKY29uc3QgZnMgPSByZXF1aXJlKCJmcyIpOwpjb25zdCBwYXRoID0gcmVxdWlyZSgicGF0aCIpOwpjb25zdCB7IHByb21pc2lmeSB9ID0gcmVxdWlyZSgndXRpbCcpOwpjb25zdCBleGVjID0gcHJvbWlzaWZ5KHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKS5leGVjKTsKY29uc3QgeyBleGVjU3luYyB9ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpOwpjb25zdCBGSUxFX1BBVEggPSBwcm9jZXNzLmVudi5GSUxFX1BBVEggfHwgJy4vdGVtcCc7IC8vIOi/kOihjOaWh+S7tuWkue+8jOiKgueCueaWh+S7tuWtmOaUvuebruW9lQpjb25zdCBwcm9qZWN0UGFnZVVSTCA9IHByb2Nlc3MuZW52LlVSTCB8fCAnJzsgICAgICAgIC8vIOWhq+WGmemhueebruWfn+WQjeWPr+W8gOWQr+iHquWKqOiuv+mXruS/nea0u++8jOmdnuagh+err+WPo+eahOWJjee8gOaYr2h0dHA6Ly8KY29uc3QgaW50ZXJ2YWxJbnNlY29uZHMgPSBwcm9jZXNzLmVudi5USU1FIHx8IDEyMDsgICAvLyDoh6rliqjorr/pl67pl7TpmpTml7bpl7TvvIgxMjDnp5LvvIkKY29uc3QgVVVJRCA9IHByb2Nlc3MuZW52LlVVSUQgfHwgJ2YyNTBlMjliLWRjM2YtNDE1MS05NTQ3LTE0OGZjYjM2MGJmZic7CmNvbnN0IFhVWElOX1NFUlZFUiA9IHByb2Nlc3MuZW52LlhVWElOX1NFUlZFUiB8fCAnbnouYWJjLmNuJzsgICAgICAvLyDlk6rlkJIz5Liq5Y+Y6YeP5LiN5YWo5LiN6L+Q6KGMCmNvbnN0IFhVWElOX1BPUlQgPSBwcm9jZXNzLmVudi5YVVhJTl9QT1JUIHx8ICc1NTU1JzsgICAgICAgICAgICAgIC8vIOWTquWQkuerr+WPo+S4uns0NDMsODQ0MywyMDk2LDIwODcsMjA4MywyMDUzfeWFtuS4reS5i+S4gOaXtuW8gOWQr3Rscwpjb25zdCBYVVhJTl9LRVkgPSBwcm9jZXNzLmVudi5YVVhJTl9LRVkgfHwgJyc7ICAgICAgICAgICAgICAgICAgIC8vIOWTquWQkuWuouaIt+err+WvhumSpQpjb25zdCBGQU5HX0RPTUFJTiA9IHByb2Nlc3MuZW52LkZBTkdfRE9NQUlOIHx8ICdnbGl0Y2gwMzI3Y2QudGZ4cXdhbC5ldS5vcmcnOyAgICAgICAgICAgICAgLy8g5Zu65a6a6Zqn6YGT5Z+f5ZCN77yM55WZ56m65Y2z5ZCv55So5Li05pe26Zqn6YGTCmNvbnN0IEZBTkdfQVVUSCA9IHByb2Nlc3MuZW52LkZBTkdfQVVUSCB8fCAnZXlKaElqb2lNR0UwTXpVNE5tRXpNR0V5TXpjek4yUXpOemd5TUdRM04yRXlNV1l4WkdJaUxDSjBJam9pWXpZd01qaGtOV1V0T1dRek9DMDBOakZqTFRrMk5HRXRPRGM1TkRka056YzRObUpqSWl3aWN5STZJazVVYkd0T1YwVXpUbTFWZEU5VVFtaE5VekF3VFhwQk5FeFVhM2xaZWxWMFQxUkZNVnBVVVhsWmJWRTBXWHBWTUNKOSc7ICAgICAgICAgICAgICAgICAvLyDlm7rlrprpmqfpgZNqc29u5oiWdG9rZW7vvIznlZnnqbrljbPlkK/nlKjkuLTml7bpmqfpgZMKY29uc3QgQ0ZJUCA9IHByb2Nlc3MuZW52LkNGSVAgfHwgJ3Nray5tb2UnOyAgICAgICAgICAgICAgICAgICAvLyDkvJjpgInln5/lkI3miJbkvJjpgIlpcApjb25zdCBDRlBPUlQgPSBwcm9jZXNzLmVudi5DRlBPUlQgfHwgNDQzOyAgICAgICAgICAgICAgICAgICAgLy8g6IqC54K556uv5Y+jCmNvbnN0IE5BTUUgPSBwcm9jZXNzLmVudi5OQU1FIHx8ICdWbHMnOyAgICAgICAgICAgICAgICAgICAgIC8vIOiKgueCueWQjeensApjb25zdCBBUkdPX1BPUlQgPSBwcm9jZXNzLmVudi5BUkdPX1BPUlQgfHwgODAwMTsgICAgICAgICAgIC8vIEFyZ2/nq6/lj6PvvIzkvb/nlKjlm7rlrprpmqfpgZN0b2tlbumcgOWSjGNm5ZCO5Y+w6K6+572u55qE56uv5Y+j5a+55bqUCmNvbnN0IFBPUlQgPSBwcm9jZXNzLmVudi5TRVJWRVJfUE9SVCB8fCBwcm9jZXNzLmVudi5QT1JUIHx8IDE2MDAwOyAvLyDoioLngrnorqLpmIXnq6/lj6PvvIzoi6Xml6Dms5XorqLpmIXor7fmiYvliqjmlLnkuLrliIbphY3nmoTnq6/lj6MKCi8v5Yib5bu66L+Q6KGM5paH5Lu25aS5CmlmICghZnMuZXhpc3RzU3luYyhGSUxFX1BBVEgpKSB7CiAgZnMubWtkaXJTeW5jKEZJTEVfUEFUSCk7CiAgY29uc29sZS5sb2coYCR7RklMRV9QQVRIfSBpcyBjcmVhdGVkYCk7Cn0gZWxzZSB7CiAgY29uc29sZS5sb2coYCR7RklMRV9QQVRIfSBhbHJlYWR5IGV4aXN0c2ApOwp9CgovL+a4heeQhuWOhuWPsuaWh+S7tgpjb25zdCBwYXRoc1RvRGVsZXRlID0gWyAnY2F0JywgJ2RvZycsICdwaWcnLCAnc3ViLnR4dCcsICdib290LmxvZyddOwpmdW5jdGlvbiBjbGVhbnVwT2xkRmlsZXMoKSB7CiAgcGF0aHNUb0RlbGV0ZS5mb3JFYWNoKChmaWxlKSA9PiB7CiAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihGSUxFX1BBVEgsIGZpbGUpOwogICAgZnMudW5saW5rKGZpbGVQYXRoLCAoZXJyKSA9PiB7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICBjb25zb2xlLmVycm9yKGBTa2lwIERlbGV0ZSAke2ZpbGVQYXRofWApOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUubG9nKGAke2ZpbGVQYXRofSBkZWxldGVkYCk7CiAgICAgIH0KICAgIH0pOwogIH0pOwp9CmNsZWFudXBPbGRGaWxlcygpOwoKLy8g5qC56Lev55SxCmFwcC5nZXQoIi8iLCBmdW5jdGlvbihyZXEsIHJlcykgewogIHJlcy5zZW5kKCJJIGxpa2UgeW91KTsKfSk7CgovLyDnlJ/miJB4ci1heemFjee9ruaWh+S7tgpjb25zdCBjb25maWcgPSB7CiAgbG9nOiB7IGFjY2VzczogJy9kZXYvbnVsbCcsIGVycm9yOiAnL2Rldi9udWxsJywgbG9nbGV2ZWw6ICdub25lJyB9LAogIGluYm91bmRzOiBbCiAgICB7IHBvcnQ6IEFSR09fUE9SVCwgcHJvdG9jb2w6ICd2bGVzcycsIHNldHRpbmdzOiB7IGNsaWVudHM6IFt7IGlkOiBVVUlELCBmbG93OiAneHRscy1ycHJ4LXZpc2lvbicgfV0sIGRlY3J5cHRpb246ICdub25lJywgZmFsbGJhY2tzOiBbeyBkZXN0OiAxNjAwMSB9LCB7IHBhdGg6ICIvdmxlc3MwMjAyIiwgZGVzdDogMTYwMDIgfSwgeyBwYXRoOiAiL3ZtZXNzMDIwMiIsIGRlc3Q6IDE2MDAzIH0sIHsgcGF0aDogIi90cm9qYW4wMjAyIiwgZGVzdDogMTYwMDQgfV0gfSwgc3RyZWFtU2V0dGluZ3M6IHsgbmV0d29yazogJ3RjcCcgfSB9LAogICAgeyBwb3J0OiAxNjAwMSwgbGlzdGVuOiAiMTI3LjAuMC4xIiwgcHJvdG9jb2w6ICJ2bGVzcyIsIHNldHRpbmdzOiB7IGNsaWVudHM6IFt7IGlkOiBVVUlEIH1dLCBkZWNyeXB0aW9uOiAibm9uZSIgfSwgc3RyZWFtU2V0dGluZ3M6IHsgbmV0d29yazogIndzIiwgc2VjdXJpdHk6ICJub25lIiB9IH0sCiAgICB7IHBvcnQ6IDE2MDAyLCBsaXN0ZW46ICIxMjcuMC4wLjEiLCBwcm90b2NvbDogInZsZXNzIiwgc2V0dGluZ3M6IHsgY2xpZW50czogW3sgaWQ6IFVVSUQsIGxldmVsOiAwIH1dLCBkZWNyeXB0aW9uOiAibm9uZSIgfSwgc3RyZWFtU2V0dGluZ3M6IHsgbmV0d29yazogIndzIiwgc2VjdXJpdHk6ICJub25lIiwgd3NTZXR0aW5nczogeyBwYXRoOiAiL3ZsZXNzMDIwMiIgfSB9LCBzbmlmZmluZzogeyBkaXNhYmxlOiBmYWxzZSwgZGVzdE92ZXJyaWRlOiBbImh0dHAiLCAidGxzIiwgInF1aWMiXSwgbWV0YWRhdGFPbmx5OiBmYWxzZSB9IH0sCiAgICB7IHBvcnQ6IDE2MDAzLCBsaXN0ZW46ICIxMjcuMC4wLjEiLCBwcm90b2NvbDogInZtZXNzIiwgc2V0dGluZ3M6IHsgY2xpZW50czogW3sgaWQ6IFVVSUQsIGFsdGVySWQ6IDAgfV0gfSwgc3RyZWFtU2V0dGluZ3M6IHsgbmV0d29yazogIndzIiwgd3NTZXR0aW5nczogeyBwYXRoOiAiL3ZtZXNzMDIwMiIgfSB9LCBzbmlmZmluZzogeyBkaXNlYmxhOiBmYWxzZSwgZGVzdE92ZXJyaWRlOiBbImh0dHAiLCAidGxzIiwgInF1aWMiXSwgbWV0YWRhdGFPbmx5OiBmYWxzZSB9IH0sCiAgICB7IHBvcnQ6IDE2MDA0LCBsaXN0ZW46ICIxMjcuMC4wLjEiLCBwcm90b2NvbDogInRyb2phbiIsIHNldHRpbmdzOiB7IGNsaWVudHM6IFt7IHBhc3N3b3JkOiBVVUlEIH1dIH0sIHN0cmVhbVNldHRpbmdzOiB7IG5ldHdvcms6ICJ3cyIsIHNlY3VyaXR5OiAibm9uZSIsIHdzU2V0dGluZ3M6IHsgcGF0aDogIi90cm9qYW4wMjAyIiB9IH0sIHNuaWZmaW5nOiB7IGRpc2FibGU6IGZhbHNlLCBkZXN0T3ZlcnJpZGU6IFsiaHR0cCIsICJ0bHMiLCAicXVpYyJdLCBtZXRhZGF0YU9ubHk6IGZhbHNlIH0gfSwKICBdLAogIGRuczogeyBzZXJ2ZXJzOiBbImh0dHBzK2xvY2FsOi8vOC44LjguOC9kbnMtcXVlcnkiXSB9LAogIG91dGJvdW5kczogWwogICAgeyBwcm90b2NvbDogImZyZWVkb20iIH0sCiAgICB7CiAgICAgIHRhZzogIldBUlAiLAogICAgICBwcm90b2NvbDogIndpcmVndWFyZCIsCiAgICAgIHNldHRpbmdzOiB7CiAgICAgICAgc2VjcmV0S2V5OiAiWUZZT0FkYncxYktUSGxOTmkrYUVqQk0zQk83dW51RkM1ck9rTVJBejlYWT0iLAogICAgICAgIGFkZHJlc3M6IFsiMTcyLjE2LjAuMi8zMiIsICIyNjA2OjQ3MDA6MTEwOjhhMzY6ZGY5MjoxMDJhOjk2MDI6ZmExOC8xMjgiXSwKICAgICAgICBwZWVyczogW3sgcHVibGljS2V5OiAiYm1YT0MrRjFGeEVNRjlkeWlLMkg1LzFTVXR6SDBKdVZvNTFoMndQZmd5bz0iLCBhbGxvd2VkSVBzOiBbIjAuMC4wLjAvMCIsICI6Oi8wIl0sIGVuZHBvaW50OiAiMTYyLjE1OS4xOTMuMTA6MjQwOCIgfV0sCiAgICAgICAgcmVzZXJ2ZWQ6IFs3OCwgMTM1LCA3Nl0sCiAgICAgICAgbXR1OiAxMjgwLAogICAgICB9LAogICAgfSwKICBdLAogIHJvdXRpbmc6IHsgZG9tYWluU3RyYXRlZ3k6ICJBc0lzIiwgcnVsZXM6IFt7IHR5cGU6ICJmaWVsZCIsIGRvbWFpbjogWyJkb21haW46b3BlbmFpLmNvbSIsICJkb21haW46YWkuY29tIl0sIG91dGJvdW5kVGFnOiAiV0FSUCIgfV0gfSwKfTsKZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4oRklMRV9QQVRILCAnY29uZmlnLmpzb24nKSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnLCBudWxsLCAyKSk7CgovLyDliKTmlq3ns7vnu5/mnrbmnoQKZnVuY3Rpb24gZ2V0U3lzdGVtQXJjaGl0ZWN0dXJlKCkgewogIGNvbnN0IGFyY2ggPSBvcy5hcmNoKCk7CiAgaWYgKGFyY2ggPT09ICdhcm0nIHx8IGFyY2ggPT09ICdhcm02NCcgfHwgYXJjaCA9PT0gJ2FhcmNoNjQnKSB7CiAgICByZXR1cm4gJ2FybSc7CiAgfSBlbHNlIHsKICAgIHJldHVybiAnYW1kJzsKICB9Cn0KCi8vIOS4i+i9veWvueW6lOezu+e7n+aetuaehOeahOS+nei1luaWh+S7tgpmdW5jdGlvbiBkb3dubG9hZEZpbGUoZmlsZU5hbWUsIGZpbGVVcmwsIGNhbGxiYWNrKSB7CiAgY29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4oRklMRV9QQVRILCBmaWxlTmFtZSk7CiAgY29uc3Qgd3JpdGVyID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oZmlsZVBhdGgpOwoKICBheGlvcyh7CiAgICBtZXRob2Q6ICdnZXQnLAogICAgdXJsOiBmaWxlVXJsLAogICAgcmVzcG9uc2VUeXBlOiAnc3RyZWFtJywKICB9KQogICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICByZXNwb25zZS5kYXRhLnBpcGUod3JpdGVyKTsKCiAgICAgIHdyaXRlci5vbignZmluaXNoJywgKCkgPT4gewogICAgICAgIHdyaXRlci5jbG9zZSgpOwogICAgICAgIGNvbnNvbGUubG9nKGBEb3dubG9hZCAke2ZpbGVOYW1lfSBzdWNjZXNzZnVsbHlgKTsKICAgICAgICBjYWxsYmFjayhudWxsLCBmaWxlTmFtZSk7CiAgICAgIH0pOwoKICAgICAgd3JpdGVyLm9uKCdlcnJvcicsIGVyciA9PiB7CiAgICAgICAgZnMudW5saW5rKGZpbGVQYXRoLCAoKSA9PiB7IH0pOwogICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBEb3dubG9hZCAke2ZpbGVOYW1lfSBmYWlsZWQ6ICR7ZXJyLm1lc3NhZ2V9YDsKICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7IC8vIOS4i+i9veWksei0peaXtui+k+WHuumUmeivr+a2iOaBrwogICAgICAgIGNhbGxiYWNrKGVycm9yTWVzc2FnZSk7CiAgICAgIH0pOwogICAgfSkKICAgIC5jYXRjaChlcnIgPT4gewogICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgRG93bmxvYWQgJHtmaWxlTmFtZX0gZmFpbGVkOiAke2Vyci5tZXNzYWdlfWA7CiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JNZXNzYWdlKTsgLy8g5LiL6L295aSx6LSl5pe26L6T5Ye66ZSZ6K+v5raI5oGvCiAgICAgIGNhbGxiYWNrKGVycm9yTWVzc2FnZSk7CiAgICB9KTsKfQoKLy8g5LiL6L295bm26L+Q6KGM5L6d6LWW5paH5Lu2CmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkRmlsZXNBbmRSdW4oKSB7CiAgY29uc3QgYXJjaGl0ZWN0dXJlID0gZ2V0U3lzdGVtQXJjaGl0ZWN0dXJlKCk7CiAgY29uc3QgZmlsZXNUb0Rvd25sb2FkID0gZ2V0RmlsZXNGb3JBcmNoaXRlY3R1cmUoYXJjaGl0ZWN0dXJlKTsKCiAgaWYgKGZpbGVzVG9Eb3dubG9hZC5sZW5ndGggPT09IDApIHsKICAgIGNvbnNvbGUubG9nKGBDYW4ndCBmaW5kIGEgZmlsZSBmb3IgdGhlIGN1cnJlbnQgYXJjaGl0ZWN0dXJlYCk7CiAgICByZXR1cm47CiAgfQoKICBjb25zdCBkb3dubG9hZFByb21pc2VzID0gZmlsZXNUb0Rvd25sb2FkLm1hcChmaWxlSW5mbyA9PiB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICBkb3dubG9hZEZpbGUoZmlsZUluZm8uZmlsZU5hbWUsIGZpbGVJbmZvLmZpbGVVcmwsIChlcnIsIGZpbGVOYW1lKSA9PiB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmUoZmlsZU5hbWUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9KTsKICB9KTsKCiAgdHJ5IHsKICAgIGF3YWl0IFByb21pc2UuYWxsKGRvd25sb2FkUHJvbWlzZXMpOyAvLyDnrYnlvoXmiYDmnInmlofku7bkuIvovb3lrozmiJAKICB9IGNhdGNoIChlcnIpIHsKICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRvd25sb2FkaW5nIGZpbGVzOicsIGVycik7CiAgICByZXR1cm47CiAgfQoKICAvLyDmjojmnYPlkozov5DooYwKICBmdW5jdGlvbiBhdXRob3JpemVGaWxlcyhmaWxlUGF0aHMpIHsKICAgIGNvbnN0IG5ld1Blcm1pc3Npb25zID0gMG83NzU7CgogICAgZmlsZVBhdGhzLmZvckVhY2gocmVsYXRpdmVGaWxlUGF0aCA9PiB7CiAgICAgIGNvbnN0IGFic29sdXRlRmlsZVBhdGggPSBwYXRoLmpvaW4oRklMRV9QQVRILCByZWxhdGl2ZUZpbGVQYXRoKTsKCiAgICAgIGZzLmNobW9kKGFic29sdXRlRmlsZVBhdGgsIG5ld1Blcm1pc3Npb25zLCAoZXJyKSA9PiB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgY29uc29sZS5lcnJvcihgRW1wb3dlcm1lbnQgZmFpbGVkIGZvciAke2Fic29sdXRlRmlsZVBhdGh9OiAke2Vycn1gKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc29sZS5sb2coYEVtcG93ZXJtZW50IHN1Y2Nlc3MgZm9yICR7YWJzb2x1dGVGaWxlUGF0aH06ICR7bmV3UGVybWlzc2lvbnMudG9TdHJpbmcoOCl9YCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH0KICBjb25zdCBmaWxlc1RvQXV0aG9yaXplID0gWycuL3BpZycsICcuL2NhdCcsICcuL2RvZyddOwogIGF1dGhvcml6ZUZpbGVzKGZpbGVzVG9BdXRob3JpemUpOwoKICAvL+i/kOihjG5lLXpoYQogIGxldCBYVVhJTl9UTFMgPSAnJzsKICBpZiAoWFVYSU5fU0VSVkVSICYmIFhVWElOX1BPUlQgJiYgWFVYSU5fS0VZKSB7CiAgICBjb25zdCB0bHNQb3J0cyA9IFsnNDQzJywgJzg0NDMnLCAnMjA5NicsICcyMDg3JywgJzIwODMnLCAnMjA1MyddOwogICAgaWYgKHRsc1BvcnRzLmluY2x1ZGVzKFhVWElOX1BPUlQpKSB7CiAgICAgIFhVWElOX1RMUyA9ICctLXRscyc7CiAgICB9IGVsc2UgewogICAgICBYVVhJTl9UTFMgPSAnJzsKICAgIH0KICAgIGNvbnN0IGNvbW1hbmQgPSBgbm9odXAgJHtGSUxFX1BBVEh9L3BpZyAtcyAke1hVWElOX1NFUlZFUn06JHtYVVhJTl9QT1JUfSAtcCAke1hVWElOX0tFWX0gJHtYVVhJTl9UTFN9ID4vZGV2L251bGwgMj4mMSAmYDsKICAgIHRyeSB7CiAgICAgIGF3YWl0IGV4ZWMoY29tbWFuZCk7CiAgICAgIGNvbnNvbGUubG9nKCdwaWcgaXMgcnVubmluZycpOwogICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBjb25zb2xlLmVycm9yKGBwaWcgcnVubmluZyBlcnJvcjogJHtlcnJvcn1gKTsKICAgIH0KICB9IGVsc2UgewogICAgY29uc29sZS5sb2coJ1hVWElOIHZhcmlhYmxlIGlzIGVtcHR5LHNraXAgcnVubmluZycpOwogIH0KCiAgLy/ov5DooYx4ci1heQogIGNvbnN0IGNvbW1hbmQxID0gYG5vaHVwICR7RklMRV9QQVRIfS9jYXQgLWMgJHtGSUxFX1BBVEh9L2NvbmZpZy5qc29uID4vZGV2L251bGwgMj4mMSAmYDsKICB0cnkgewogICAgYXdhaXQgZXhlYyhjb21tYW5kMSk7CiAgICBjb25zb2xlLmxvZygnY2F0IGlzIHJ1bm5pbmcnKTsKICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTsKICB9IGNhdGNoIChlcnJvcikgewogICAgY29uc29sZS5lcnJvcihgY2F0IHJ1bm5pbmcgZXJyb3I6ICR7ZXJyb3J9YCk7CiAgfQoKICAvLyDov5DooYxjbG91ZC1mYXJlZAogIGlmIChmcy5leGlzdHNTeW5jKHBhdGguam9pbihGSUxFX1BBVEgsICdkb2cnKSkpIHsKICAgIGxldCBhcmdzOwoKICAgIGlmIChGQU5HX0FVVEgubWF0Y2goL15bQS1aMC05YS16PV17MTIwLDI1MH0kLykpIHsKICAgICAgYXJncyA9IGB0dW5uZWwgLS1lZGdlLWlwLXZlcnNpb24gYXV0byAtLW5vLWF1dG91cGRhdGUgLS1wcm90b2NvbCBodHRwMiBydW4gLS10b2tlbiAke0ZBTkdfQVVUSH1gOwogICAgfSBlbHNlIGlmIChGQU5HX0FVVEgubWF0Y2goL1R1bm5lbFNlY3JldC8pKSB7CiAgICAgIGFyZ3MgPSBgdHVubmVsIC0tZWRnZS1pcC12ZXJzaW9uIGF1dG8gLS1jb25maWcgJHtGSUxFX1BBVEh9L3R1bm5lbC55bWwgcnVuYDsKICAgIH0gZWxzZSB7CiAgICAgIGFyZ3MgPSBgdHVubmVsIC0tZWRnZS1pcC12ZXJzaW9uIGF1dG8gLS1uby1hdXRvdXBkYXRlIC0tcHJvdG9jb2wgaHR0cDIgLS1sb2dmaWxlICR7RklMRV9QQVRIfS9ib290LmxvZyAtLWxvZ2xldmVsIGluZm8gLS11cmwgaHR0cDovL2xvY2FsaG9zdDoke0FSR09fUE9SVH1gOwogICAgfQoKICAgIHRyeSB7CiAgICAgIGF3YWl0IGV4ZWMoYG5vaHVwICR7RklMRV9QQVRIfS9kb2cgJHthcmdzfSA+L2Rldi9udWxsIDI+JjEgJmApOwogICAgICBjb25zb2xlLmxvZygnZG9nIGlzIHJ1bm5pbmcnKTsKICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMjAwMCkpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZXhlY3V0aW5nIGNvbW1hbmQ6ICR7ZXJyb3J9YCk7CiAgICB9CiAgfQogIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwMDApKTsKCn0KLy/moLnmja7ns7vnu5/mnrbmnoTov5Tlm57lr7nlupTnmoR1cmwKZnVuY3Rpb24gZ2V0RmlsZXNGb3JBcmNoaXRlY3R1cmUoYXJjaGl0ZWN0dXJlKSB7CiAgaWYgKGFyY2hpdGVjdHVyZSA9PT0gJ2FybScpIHsKICAgIHJldHVybiBbCiAgICAgIHsgZmlsZU5hbWU6ICJwaWciLCBmaWxlVXJsOiAiaHR0cHM6Ly9naXRodWIuY29tL2Vvb2NlL3Rlc3QvcmVsZWFzZXMvZG93bmxvYWQvQVJNL3N3aXRoIiB9LAogICAgICB7IGZpbGVOYW1lOiAiY2F0IiwgZmlsZVVybDogImh0dHBzOi8vZ2l0aHViLmNvbS9lb29jZS90ZXN0L3JlbGVhc2VzL2Rvd25sb2FkL0FSTS93ZWIiIH0sCiAgICAgIHsgZmlsZU5hbWU6ICJkb2ciLCBmaWxlVXJsOiAiaHR0cHM6Ly9naXRodWIuY29tL2Vvb2NlL3Rlc3QvcmVsZWFzZXMvZG93bmxvYWQvYXJtNjQvYm90MTMiIH0sCiAgICBdOwogIH0gZWxzZSBpZiAoYXJjaGl0ZWN0dXJlID09PSAnYW1kJykgewogICAgcmV0dXJuIFsKICAgICAgeyBmaWxlTmFtZTogInBpZyIsIGZpbGVVcmw6ICJodHRwczovL2dpdGh1Yi5jb20vZW9vY2UvdGVzdC9yZWxlYXNlcy9kb3dubG9hZC9hbWQ2NC9ucG0iIH0sCiAgICAgIHsgZmlsZU5hbWU6ICJjYXQiLCBmaWxlVXJsOiAiaHR0cHM6Ly9naXRodWIuY29tL2Vvb2NlL3Rlc3QvcmVsZWFzZXMvZG93bmxvYWQvYW1kNjQvd2ViIiB9LAogICAgICB7IGZpbGVOYW1lOiAiZG9nIiwgZmlsZVVybDogImh0dHBzOi8vZ2l0aHViLmNvbS9lb29jZS90ZXN0L3JlbGVhc2VzL2Rvd25sb2FkL2FtZDY0L2JvdDEzIiB9LAogICAgXTsKICB9CiAgcmV0dXJuIFtdOwp9CgovLyDojrflj5blm7rlrprpmqfpgZNqc29uCmZ1bmN0aW9uIGFyZ29UeXBlKCkgewogIGlmICghRkFOR19BVVRIIHx8ICFGQU5HX0RPTUFJTikgewogICAgY29uc29sZS5sb2coIkZBTkdfRE9NQUlOIG9yIEZBTkdfQVVUSCB2YXJpYWJsZSBpcyBlbXB0eSwgdXNlIHF1aWNrIHR1bm5lbHMiKTsKICAgIHJldHVybjsKICB9CgogIGlmIChGQU5HX0FVVEguaW5jbHVkZXMoJ1R1bm5lbFNlY3JldCcpKSB7CiAgICBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihGSUxFX1BBVEgsICd0dW5uZWwuanNvbicpLCBGQU5HX0FVVEgpOwogICAgY29uc3QgdHVubmVsWWFtbCA9IGAKICB0dW5uZWw6ICR7RkFOR19BVVRILnNwbGl0KCciJylbMTFdfQogIGNyZWRlbnRpYWxzLWZpbGU6ICR7cGF0aC5qb2luKEZJTEVfUEFUSCwgJ3R1bm5lbC5qc29uJyl9CiAgcHJvdG9jb2w6IGh0dHAyCiAgCiAgaW5ncmVzczoKICAgIC0gaG9zdG5hbWU6ICR7RkFOR19ET01BSU59CiAgICAgIHNlcnZpY2U6IGh0dHA6Ly9sb2NhbGhvc3Q6JHtBUkdPX1BPUlR9CiAgICAgIG9yaWdpblJlcXVlc3Q6CiAgICAgICAgbm9UTFNWZXJpZnk6IHRydWUKICAgIC0gc2VydmljZTogaHR0cF9zdGF0dXM6NDA0CiAgYDsKICAgIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKEZJTEVfUEFUSCwgJ3R1bm5lbC55bWwnKSwgdHVubmVsWWFtbCk7CiAgfSBlbHNlIHsKICAgIGNvbnNvbGUubG9nKCJGQU5HX0FVVEggbWlzbWF0Y2ggVHVubmVsU2VjcmV0LHVzZSB0b2tlbiBjb25uZWN0IHRvIHR1bm5lbCIpOwogIH0KfQphcmdvVHlwZSgpOwoKLy8g6I635Y+W5Li05pe26Zqn6YGTZG9tYWluCmFzeW5jIGZ1bmN0aW9uIGV4dHJhY3REb21haW5zKCkgewogIGxldCBhcmdvRG9tYWluOwoKICBpZiAoRkFOR19BVVRIICYmIEZBTkdfRE9NQUlOKSB7CiAgICBhcmdvRG9tYWluID0gRkFOR19ET01BSU47CiAgICBjb25zb2xlLmxvZygnRkFOR19ET01BSU46JywgYXJnb0RvbWFpbik7CiAgICBhd2FpdCBnZW5lcmF0ZUxpbmtzKGFyZ29Eb21haW4pOwogIH0gZWxzZSB7CiAgICB0cnkgewogICAgICBjb25zdCBmaWxlQ29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oRklMRV9QQVRILCAnYm9vdC5sb2cnKSwgJ3V0Zi04Jyk7CiAgICAgIGNvbnN0IGxpbmVzID0gZmlsZUNvbnRlbnQuc3BsaXQoJ1xuJyk7CiAgICAgIGNvbnN0IGFyZ29Eb21haW5zID0gW107CiAgICAgIGxpbmVzLmZvckVhY2goKGxpbmUpID0+IHsKICAgICAgICBjb25zdCBkb21haW5NYXRjaCA9IGxpbmUubWF0Y2goL2h0dHBzPzpcL1wvKFteIF0qdHJ5Y2xvdWRmbGFyZVwuY29tKVwvPy8pOwogICAgICAgIGlmIChkb21haW5NYXRjaCkgewogICAgICAgICAgY29uc3QgZG9tYWluID0gZG9tYWluTWF0Y2hbMV07CiAgICAgICAgICBhcmdvRG9tYWlucy5wdXNoKGRvbWFpbik7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIGlmIChhcmdvRG9tYWlucy5sZW5ndGggPiAwKSB7CiAgICAgICAgYXJnb0RvbWFpbiA9IGFyZ29Eb21haW5zWzBdOwogICAgICAgIGNvbnNvbGUubG9nKCdBcmdvRG9tYWluOicsIGFyZ29Eb21haW4pOwogICAgICAgIGF3YWl0IGdlbmVyYXRlTGlua3MoYXJnb0RvbWFpbik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5sb2coJ0FyZ29Eb21haW4gbm90IGZvdW5kLCByZS1ydW5uaW5nIGRvZyB0byBvYnRhaW4gQXJnb0RvbWFpbicpOwogICAgICAgIC8vIOWIoOmZpCBib290LmxvZyDmlofku7bvvIznrYnlvoUgMnMg6YeN5paw6L+Q6KGMIHNlcnZlciDku6Xojrflj5YgQXJnb0RvbWFpbgogICAgICAgIGZzLnVubGlua1N5bmMocGF0aC5qb2luKEZJTEVfUEFUSCwgJ2Jvb3QubG9nJykpOwogICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDIwMDApKTsKICAgICAgICBjb25zdCBhcmdzID0gYHR1bm5lbCAtLWVkZ2UtaXAtdmVyc2lvbiBhdXRvIC0tbm8tYXV0b3VwZGF0ZSAtLXByb3RvY29sIGh0dHAyIC0tbG9nZmlsZSAke0ZJTEVfUEFUSH0vYm9vdC5sb2cgLS1sb2dsZXZlbCBpbmZvIC0tdXJsIGh0dHA6Ly9sb2NhbGhvc3Q6JHtBUkdPX1BPUlR9YDsKICAgICAgICB0cnkgewogICAgICAgICAgYXdhaXQgZXhlYyhgbm9odXAgJHtwYXRoLmpvaW4oRklMRV9QQVRILCAnZG9nJyl9ICR7YXJnc30gPi9kZXYvbnVsbCAyPiYxICZgKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCdkb2cgaXMgcnVubmluZy4nKTsKICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDMwMDApKTsKICAgICAgICAgIGF3YWl0IGV4dHJhY3REb21haW5zKCk7IC8vIOmHjeaWsOaPkOWPluWfn+WQjQogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBleGVjdXRpbmcgY29tbWFuZDogJHtlcnJvcn1gKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlYWRpbmcgYm9vdC5sb2c6JywgZXJyb3IpOwogICAgfQogIH0KCiAgLy8g55Sf5oiQIGxpc3Qg5ZKMIHN1YiDkv6Hmga8KICBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUxpbmtzKGFyZ29Eb21haW4pIHsKICAgIGNvbnN0IG1ldGFJbmZvID0gZXhlY1N5bmMoCiAgICAgICdjdXJsIC1zIGh0dHBzOi8vc3BlZWQuY2xvdWRmbGFyZS5jb20vbWV0YSB8IGF3ayAtRlxcIiBcJ3twcmludCAkMjYiLSIkMTh9XCcgfCBzZWQgLWUgXCdzLyAvXy9nXCcnLAogICAgICB7IGVuY29kaW5nOiAndXRmLTgnIH0KICAgICk7CiAgICBjb25zdCBJU1AgPSBtZXRhSW5mby50cmltKCk7CgogICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgIGNvbnN0IFZNRVNTID0geyB2OiAnMicsIHBzOiBgJHtOQU1FfS0ke0lTUH1gLCBhZGQ6IENGSVAsIHBvcnQ6IENGUE9SVCwgaWQ6IFVVSUQsIGFpZDogJzAnLCBzY3k6ICdub25lJywgbmV0OiAnd3MnLCB0eXBlOiAnbm9uZScsIGhvc3Q6IGFyZ29Eb21haW4sIHBhdGg6ICcvdm1lc3MwMjAyP2VkPTI1NjAnLCB0bHM6ICd0bHMnLCBzbmk6IGFyZ29Eb21haW4sIGFscG46ICcnIH07CiAgICAgICAgY29uc3Qgc3ViVHh0ID0gYAp2bGVzczovLyR7VVVJRH1AJHtDRklQfToke0NGUE9SVH0/ZW5jcnlwdGlvbj1ub25lJnNlY3VyaXR5PXRscyZzbmk9JHthcmdvRG9tYWlufSZ0eXBlPXdzJmhvc3Q9JHthcmdvRG9tYWlufSZwYXRoPSUyRnZsZXNzMDIwMj9lZD0yNTYwIyR7TkFNRX0tJHtJU1B9CiAgCnZtZXNzOi8vJHtCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShWTUVTUykpLnRvU3RyaW5nKCdiYXNlNjQnKX0KICAKdHJvamFuOi8vJHtVVUlEfUAke0NGSVB9OiR7Q0ZQT1JUfT9zZWN1cml0eT10bHMmc25pPSR7YXJnb0RvbWFpbn0mdHlwZT13cyZob3N0PSR7YXJnb0RvbWFpbn0mcGF0aD0lMkZ0cm9qYW4wMjAyP2VkPTI1NjAjJHtOQU1FfS0ke0lTUH0KICAgIGA7CgogICAgICAgIC8vIOaJk+WNsCBzdWIudHh0IOWGheWuueWIsOaOp+WItuWPsAogICAgICAgIGNvbnNvbGUubG9nKEJ1ZmZlci5mcm9tKHN1YlR4dCkudG9TdHJpbmcoJ2Jhc2U2NCcpKTsKICAgICAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihGSUxFX1BBVEgsICdzdWIudHh0Jyk7CiAgICAgICAgZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgQnVmZmVyLmZyb20oc3ViVHh0KS50b1N0cmluZygnYmFzZTY0JykpOwogICAgICAgIGNvbnNvbGUubG9nKCdGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseScpOwogICAgICAgIGNvbnNvbGUubG9nKCdUaGFuayB5b3UgZm9yIHVzaW5nIHRoaXMgc2NyaXB0LGVuam95IScpOwogICAgICAgIC8vIOWwhuWGheWuuei/m+ihjCBiYXNlNjQg57yW56CB5bm25YaZ5YWlIC9zdWIg6Lev55SxCiAgICAgICAgYXBwLmdldCgnL3N1YicsIChyZXEsIHJlcykgPT4gewogICAgICAgICAgY29uc3QgZW5jb2RlZENvbnRlbnQgPSBCdWZmZXIuZnJvbShzdWJUeHQpLnRvU3RyaW5nKCdiYXNlNjQnKTsKICAgICAgICAgIHJlcy5zZXQoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04Jyk7CiAgICAgICAgICByZXMuc2VuZChlbmNvZGVkQ29udGVudCk7CiAgICAgICAgfSk7CiAgICAgICAgcmVzb2x2ZShzdWJUeHQpOwogICAgICB9LCAyMDAwKTsKICAgIH0pOwogIH0KfQoKLy8gMuWIhumSn+WQjuWIoOmZpGJvb3QsY29uZmln5paH5Lu2CmNvbnN0IGJvb3RMb2dQYXRoID0gcGF0aC5qb2luKEZJTEVfUEFUSCwgJ2Jvb3QubG9nJyk7CmNvbnN0IGNvbmZpZ1BhdGggPSBwYXRoLmpvaW4oRklMRV9QQVRILCAnY29uZmlnLmpzb24nKTsKZnVuY3Rpb24gY2xlYW5GaWxlcygpIHsKICBzZXRUaW1lb3V0KCgpID0+IHsKICAgIGV4ZWMoYHJtIC1yZiAke2Jvb3RMb2dQYXRofSAke2NvbmZpZ1BhdGh9YCwgKGVycm9yLCBzdGRvdXQsIHN0ZGVycikgPT4gewogICAgICBpZiAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciB3aGlsZSBkZWxldGluZyBmaWxlczogJHtlcnJvcn1gKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc29sZS5jbGVhcigpCiAgICAgIGNvbnNvbGUubG9nKCdBcHAgaXMgcnVubmluZycpOwogICAgICBjb25zb2xlLmxvZygnVGhhbmsgeW91IGZvciB1c2luZyB0aGlzIHNjcmlwdCxlbmpveSEnKTsKICAgIH0pOwogIH0sIDEyMDAwMCk7IC8vIDEyMCDnp5IKfQpjbGVhbkZpbGVzKCk7CgovLyDoh6rliqjorr/pl67pobnnm65VUkwKbGV0IGhhc0xvZ2dlZEVtcHR5TWVzc2FnZSA9IGZhbHNlOwphc3luYyBmdW5jdGlvbiB2aXNpdFByb2plY3RQYWdlKCkgewogIHRyeSB7CiAgICAvLyDlpoLmnpxVUkzlkoxUSU1F5Y+Y6YeP5Li656m65pe26Lez6L+H6K6/6Zeu6aG555uuVVJMCiAgICBpZiAoIXByb2plY3RQYWdlVVJMIHx8ICFpbnRlcnZhbEluc2Vjb25kcykgewogICAgICBpZiAoIWhhc0xvZ2dlZEVtcHR5TWVzc2FnZSkgewogICAgICAgIGNvbnNvbGUubG9nKCJVUkwgb3IgVElNRSB2YXJpYWJsZSBpcyBlbXB0eSxza2lwIHZpc2l0IHVybCIpOwogICAgICAgIGhhc0xvZ2dlZEVtcHR5TWVzc2FnZSA9IHRydWU7CiAgICAgIH0KICAgICAgcmV0dXJuOwogICAgfSBlbHNlIHsKICAgICAgaGFzTG9nZ2VkRW1wdHlNZXNzYWdlID0gZmFsc2U7CiAgICB9CgogICAgYXdhaXQgYXhpb3MuZ2V0KHByb2plY3RQYWdlVVJMKTsKICAgIC8vIGNvbnNvbGUubG9nKGBWaXNpdGluZyBwcm9qZWN0IHBhZ2U6ICR7VVJMfWApOwogICAgY29uc29sZS5sb2coJ1BhZ2UgdmlzaXRlZCBzdWNjZXNzZnVsbHknKTsKICAgIGNvbnNvbGUuY2xlYXIoKQogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB2aXNpdGluZyBwcm9qZWN0IHBhZ2U6JywgZXJyb3IubWVzc2FnZSk7CiAgfQp9CnNldEludGVydmFsKHZpc2l0UHJvamVjdFBhZ2UsIGludGVydmFsSW5zZWNvbmRzICogMTAwMCk7CgovLyDlm57osIPov5DooYwKYXN5bmMgZnVuY3Rpb24gc3RhcnRzZXJ2ZXIoKSB7CiAgYXdhaXQgZG93bmxvYWRGaWxlc0FuZFJ1bigpOwogIGF3YWl0IGV4dHJhY3REb21haW5zKCk7CiAgdmlzaXRQcm9qZWN0UGFnZSgpOwp9CnN0YXJ0c2VydmVyKCk7CgphcHAubGlzdGVuKFBPUlQsICgpID0+IGNvbnNvbGUubG9nKGBIdHRwIHNlcnZlciBpcyBydW5uaW5nIG9uIHBvcnQ6JHtQT1JUfSFgKSk7Cg==" | base64 -d | bash